/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    List<List<Integer>> res = new ArrayList<>();
    Set<Integer> set = new HashSet<Integer>();
    
    int max = 0, min = 0;

    public List<List<Integer>> verticalTraversal(TreeNode root){

     

        traverse(root, 0);

        return res;

    }
    public void traverse(TreeNode root, int cnt){

        if(root == null){return;}

        int lens = set.size() + cnt;

        if(cnt < min){
            set.add(cnt);

            res.add(0,new ArrayList<>());
            res.get(0).add(root.val);
            min = cnt;

            
        }else if(max < cnt){

            res.add(new ArrayList<>());
            res.get(res.size() - 1).add(root.val);
            max = cnt;
        }

        else{
            if(res.size() == 0){
                res.add(new ArrayList<>());res.get(0).add(root.val);
            }
            else{
                List<Integer> list = res.get(set.size() + cnt);
                list.add(root.val);

            }
        }

        traverse(root.left, cnt - 1);
        traverse(root.right, cnt + 1);

    }
}
